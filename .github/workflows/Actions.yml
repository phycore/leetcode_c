name: Actions

on:
  push

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
            os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Unit Tests
      working-directory: ${{github.workspace}}/build
    #  # Execute tests defined by the CMake configuration.
    #  # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    # Windows
    - name: windows-make-directory
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        mkdir -p ${{github.workspace}}\testing
        mkdir -p ${{github.workspace}}\testing\Windows

    - name: windows-test-package
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Copy-Item -Path "${{github.workspace}}\bin\${{env.BUILD_TYPE}}\main_leetcode.exe" -Destination "${{github.workspace}}\testing\Windows"
        Copy-Item -Path "${{github.workspace}}\bin\${{env.BUILD_TYPE}}\*.lib" -Destination "${{github.workspace}}\testing\Windows"
        Copy-Item -Path "${{github.workspace}}\problems\*.json" -Destination "${{github.workspace}}\testing\Windows"

    - name: windows-test-upload
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: win-leetcode-artifacts
        path: ${{github.workspace}}\testing\Windows

    # Linux
    - name: linux-make-directory
      if: runner.os == 'Linux'
      shell: bash
      run: |
        mkdir ${{github.workspace}}/testing
        mkdir ${{github.workspace}}/testing/Linux
        chmod 777 ${{github.workspace}}/testing

    - name: linux-test-package
      if: runner.os == 'Linux'
      shell: bash
      run: |
        cp ${{github.workspace}}/bin/main_leetcode ${{github.workspace}}/testing/Linux
        cp ${{github.workspace}}/bin/*.a ${{github.workspace}}/testing/Linux
        cp ${{github.workspace}}/problems/*.json ${{github.workspace}}/testing/Linux

    - name: linux-test-upload
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v3
      with:
        name: linux-leetcode-artifacts
        path: ${{github.workspace}}/testing/Linux

  windows-tests:
    needs: build

    runs-on: windows-latest
    strategy:
        matrix:
            problem: [TwoSum,
                      AddTwoNumbers,
                      LongestSubstring,
                      RotateImage,
                      LengthOfLastWord]

    steps:
    - name: windows-test-download
      uses: actions/download-artifact@v3
      with:
        name: win-leetcode-artifacts
        path: ${{github.workspace}}/testing/Windows

    - name: leetcode-check-testing
      shell: pwsh
      run: |
        Set-Location ${{github.workspace}}/testing/Windows
        Get-ChildItem

    - name: leetcode-testing ${{matrix.problem}}
      shell: pwsh
      working-directory: ${{github.workspace}}/testing/Windows
      run: |
        for ($Var = 1; $Var -le 3; $Var++) {
          .\main_leetcode.exe -j ${{matrix.problem}}_case_$Var.json
        }

  linux-tests:
    needs: build

    runs-on: ubuntu-latest
    strategy:
      matrix:
          problem: [TwoSum,
                    AddTwoNumbers,
                    LongestSubstring,
                    RotateImage,
                    LengthOfLastWord]

    steps:
    - name: linux-test-download
      uses: actions/download-artifact@v3
      with:
        name: linux-leetcode-artifacts
        path: ${{github.workspace}}/testing/Linux

    - name: leetcode-check-testing
      shell: bash
      run: |
        ls -al ${{github.workspace}}/testing
        cd ${{github.workspace}}/testing/Linux
        chmod u+x main_leetcode
        ls -al

    - name: leetcode-testing ${{matrix.problem}}
      shell: bash
      working-directory: ${{github.workspace}}/testing/Linux
      run: |
        for i in {1..3}
        do
          ./main_leetcode -j ${{matrix.problem}}_case_$i.json
        done
